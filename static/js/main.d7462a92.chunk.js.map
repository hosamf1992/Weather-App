{"version":3,"sources":["logo.svg","services/WeatherService.js","modules/weather/actions.js","cmps/MainWeather/MainWeather.js","cmps/TodayWeather/TodayWeather.js","cmps/NextDays/NextDays.js","cmps/WeatherList/WeatherList.js","cmps/Search/WeatherSearch.js","services/GeoService.js","pages/HomePage/HomePage.js","App.js","serviceWorker.js","modules/weather/reducers.js","store.js","index.js"],"names":["module","exports","WEATHER_API","BASE_URL","timestampToDate","timestamp","Date","toDateString","weatherToday","results","console","log","dateToday","list","dt","sunrise","city","toTimeString","sunset","substr","weather","filter","name","country","date","toLocaleString","weekday","day","month","nextDaysWeather","seen","Set","el","duplicate","has","add","query","a","async","lat","lng","axios","get","res","data","today","next","weathers","response","status","convertToHour","timeStr","toLocaleTimeString","substring","shortDate","temp","toISOString","replace","setWeather","type","props","mainWeather","className","src","icon","main","toFixed","temp_min","feels_like","temp_max","humidity","weatherService","dt_txt","nextDays","splice","length","map","key","searchTerm","placeholder","onKeyDown","e","keyCode","search","onChange","ev","value","target","API_KEY","str","geometry","location","HomePage","state","setSearch","geoService","address","loadWeather","this","React","Component","mapDispatchToProps","dispatch","connect","App","exact","path","component","Boolean","window","hostname","match","INITIAL_STATE","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7462a92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios'\r\nconst WEATHER_API = \"5b358150ea9a5438e8cf661369d8d9e8\";\r\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5/forecast?\"\r\n\r\n\r\n\r\nasync function query(lat = \"32.0792765\", lng = \"34.7915845\") {\r\n\r\n    try {\r\n        const res = await axios.get(`${BASE_URL}lat=${lat}&lon=${lng}&units=metric&appid=${WEATHER_API}`);\r\n        const today = await weatherToday(res.data)\r\n        const next = await nextDaysWeather(res.data);\r\n        const weathers = { today, next }\r\n        return weathers\r\n    }\r\n    catch (err) {\r\n        if (err.response.status === 401) {\r\n        }\r\n    }\r\n}\r\n\r\nfunction timestampToString(timestamp) {\r\n    const date = new Date(timestamp * 1000).toLocaleString('en-us',\r\n        { weekday: 'long', day: 'numeric', month: 'long', })\r\n    return date\r\n}\r\n\r\nfunction shortDate(timestamp) {\r\n    let date = new Date(timestamp * 1000);\r\n    let temp = date;\r\n    temp = temp.toDateString();\r\n    const day = temp.substr(0, 3);\r\n    date = date.toISOString().substr(5, 5);\r\n    date = date.replace('-', '/')\r\n    const shortDate={\r\n        date,\r\n        day\r\n    }\r\n    return shortDate\r\n}\r\n\r\nfunction timestampToDate(timestamp) {\r\n    const date = new Date(timestamp * 1000).toDateString()\r\n    return date;\r\n}\r\n\r\nfunction convertToHour(date) {\r\n    date = new Date(date)\r\n    const timeStr = date.toLocaleTimeString()\r\n    const time = timeStr.substring(0, 4) + ' ' + timeStr.substring(8, 11)\r\n    return time;\r\n}\r\n\r\nfunction weatherToday(results) {\r\n    console.log(results)\r\n    let dateToday = results.list[0].dt;\r\n    let sunrise = new Date(results.city.sunrise * 1000).toTimeString();\r\n    let sunset = new Date(results.city.sunset * 1000).toTimeString();\r\n    sunrise = sunrise.substr(0, 5)\r\n    sunset = sunset.substr(0, 5)\r\n    dateToday = timestampToDate(dateToday)\r\n    const filterWeather = results.list.filter(weather => {\r\n        return timestampToDate(weather.dt) === dateToday;\r\n    })\r\n    const todaysWeather = {\r\n        weather: filterWeather,\r\n        sunrise,\r\n        sunset,\r\n        city: results.city.name,\r\n        country: results.city.country,\r\n        date: timestampToString(results.list[0].dt)\r\n    }\r\n    return todaysWeather\r\n}\r\n\r\nfunction nextDaysWeather(results) {\r\n    const seen = new Set();\r\n    let weather = results.list;\r\n    const filteredWeather = weather.filter(el => {\r\n        const duplicate = seen.has(timestampToDate(el.dt));\r\n        seen.add(timestampToDate(el.dt));\r\n        return !duplicate;\r\n    });\r\n    return filteredWeather\r\n}\r\n\r\nexport default {\r\n    query,\r\n    convertToHour,\r\n    shortDate\r\n}","import weatherService from \"../../services/WeatherService\"\r\n\r\n\r\nconst setWeather = (weather) => {\r\n    return { type: 'SET_WEATHER', weather }\r\n}\r\nexport const loadWeather = (lat,lng) => {\r\n    return async (dispatch) => {\r\n        const weather = await weatherService.query(lat,lng)\r\n        if(weather)  return dispatch(setWeather(weather))\r\n      \r\n    }\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport './MainWeather.scss'\r\n\r\nexport default function (props) {\r\n    const { weather } = props;\r\n    const mainWeather = weather.weather\r\n   \r\n    return (\r\n        <section className=\"main-weather\">\r\n            {weather && mainWeather && <>\r\n                <div className=\"date-location\">\r\n                    <h1 >{weather.city},{weather.country}</h1>\r\n                    <span >{weather.date}</span>\r\n                </div>\r\n                <div className=\"weather-details\">\r\n                    <div className=\" divider first-panel\">\r\n                        <div className=\"flex flex-row align-center space-around\">\r\n                            <div className=\"icon-temp\">\r\n                                <img className=\"main-icon\" src={`http://openweathermap.org/img/wn/${mainWeather[0].weather[0].icon}@2x.png`} />\r\n                            </div>\r\n                            <div className=\"degree-summary flex  flex-col flex-center align-center\">\r\n                                <div>{mainWeather[0].main.temp.toFixed(0)}&#176;</div>\r\n                                <div>{mainWeather[0].weather[0].main}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"second-panel flex flex-col flex-center\">\r\n                        <div className=\"temp-stat\">\r\n                            <div className=\"stat min\">\r\n                                <div className=\"stat-val\">{mainWeather[0].main.temp_min.toFixed(0)}&#176;</div>\r\n                                <div className=\"stat-label\">Min</div>\r\n                            </div>\r\n                            <div className=\"stat rain\">\r\n                                <div className=\"stat-val\">{mainWeather[0].main.feels_like.toFixed(0)}&#176;</div>\r\n                                <div className=\"stat-label\">Feels</div>\r\n                            </div>\r\n                            <div className=\"stat sunrise\">\r\n                                <div className=\"stat-val\">{weather.sunrise}</div>\r\n                                <div className=\"stat-label\">Sunrise</div>\r\n                            </div>\r\n                            <div className=\"stat max\">\r\n                                <div className=\"stat-val\">{mainWeather[0].main.temp_max.toFixed(0)}&#176;</div>\r\n                                <div className=\"stat-label\">Max</div>\r\n                            </div>\r\n                            <div className=\"stat wind\">\r\n                                <div className=\"stat-val\">{mainWeather[0].main.humidity.toFixed(0)}%</div>\r\n                                <div className=\"stat-label\">Humidity</div>\r\n                            </div>\r\n                            <div className=\"stat sunset\">\r\n                                <div className=\"stat-val\">{weather.sunset}</div>\r\n                                <div className=\"stat-label\">Sunset</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>}\r\n        </section>\r\n\r\n    )\r\n}","import React from 'react'\r\nimport './TodayWeather.scss'\r\nimport weatherService from '../../services/WeatherService'\r\n\r\nexport default function (props) {\r\n    const { weather } = props;\r\n    return (\r\n        <div className=\"today-details flex flex-col align-center\">\r\n            <div className=\"today-detail\">{weatherService.convertToHour(weather.dt_txt)}</div>\r\n            <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} />\r\n            <div className=\"today-detail\">{weather.main.temp.toFixed(0)}&#176;</div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './NextDays.scss'\r\nimport weatherService from '../../services/WeatherService'\r\n\r\nexport default function (props) {\r\n    const { weather } = props;\r\n    return (\r\n        <div className=\"next-details flex space-around flex-row\">\r\n            <div className=\"items\">\r\n                <div className=\"item-val\">{weatherService.shortDate(weather.dt).day}</div>\r\n                <div className=\"item-label\">{weatherService.shortDate(weather.dt).date}</div>\r\n            </div>\r\n            <div className=\"items\">\r\n            <img  src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} />\r\n\r\n            </div>\r\n            <div className=\"items\">\r\n                <div className=\"item-val\">{weather.main.temp_min.toFixed(0)}&#176;</div>\r\n                <div className=\"item-label\">Min</div>\r\n            </div>\r\n            <div className=\"items\">\r\n                <div className=\"item-val\">{weather.main.temp_max.toFixed(0)}&#176;</div>\r\n                <div className=\"item-label\">Max</div>\r\n            </div>\r\n            <div className=\"items\">\r\n                <div className=\"item-val\">{weather.main.feels_like.toFixed(0)}&#176;</div>\r\n                <div className=\"item-label\">Feels</div>\r\n            </div>\r\n            <div className=\"items\">\r\n                <div className=\"item-val\">{weather.main.humidity.toFixed(0)}%</div>\r\n                <div className=\"item-label\">Humidity</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react'\r\nimport './WeatherList.scss'\r\nimport TodayWeather from '../TodayWeather/TodayWeather'\r\nimport NextDays from '../NextDays/NextDays'\r\n\r\nexport default function (props) {\r\n    const { weatherToday } = props;\r\n    const { nextDays } = props;\r\n    nextDays.splice(0, 1)\r\n    return (\r\n        <section className=\"weather-list\">\r\n            {weatherToday.weather && weatherToday.weather.length > 3 && <>\r\n                <div className=\"title\">Hourly Weather</div>\r\n                <div className=\"today-list\" >\r\n                    {weatherToday.weather.splice(6) && weatherToday.weather.map(weather => {\r\n                        return (\r\n                            <TodayWeather key={weather.dt} weather={weather} />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </>}\r\n            <div className=\"title\">Next Days</div>\r\n            <section className=\"daily-list\">\r\n                {<>\r\n                    {nextDays && nextDays.map(weather => {\r\n                        return (\r\n                            <NextDays key={weather.dt} weather={weather} />\r\n                        )\r\n                    })}\r\n                </>}\r\n            </section>\r\n        </section>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport './WeatherSearch.scss'\r\n\r\nexport default function (props) {\r\n    let searchTerm = '';\r\n    const handleFilter = (value) => {\r\n        searchTerm = value\r\n    }\r\n    const keyPress = (e) => {\r\n        if (searchTerm !== '' && e.keyCode == 13) {\r\n            props.search(searchTerm)\r\n        }\r\n    }\r\n    return (\r\n        <section className=\"search\" >\r\n            <input className=\"input-search\" placeholder=\"Search\" onKeyDown={keyPress} type=\"text\" onChange={(ev) => handleFilter(ev.target.value)} />\r\n        </section>\r\n    )\r\n}\r\n\r\n","import axios from \"axios\";\r\n\r\nconst API_KEY = 'AIzaSyAQfVUk4CHwfLcp1CWGmPN4hNhp4Mo2Xb4'\r\nconst BASE_URL = 'https://maps.googleapis.com/maps/api/geocode/json?language=en';\r\n\r\nasync function query(str) {\r\n    try {\r\n        const res = await axios.get(`${BASE_URL}&address=${str}&key=${API_KEY}`);\r\n        return res.data.results[0].geometry.location;\r\n    }\r\n    catch (err) {\r\n        if (err.response.status === 401) {\r\n        }\r\n    }\r\n}\r\n\r\nexport default  {\r\n    query\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { loadWeather } from '../../modules/weather/actions'\r\n\r\nimport './HomePage.scss';\r\nimport MainWeather from '../../cmps/MainWeather/MainWeather'\r\nimport WeatherList from '../../cmps/WeatherList/WeatherList'\r\nimport WeatherSearch from '../../cmps/Search/WeatherSearch'\r\nimport geoService from '../../services/GeoService'\r\n\r\nclass HomePage extends React.Component {\r\n    state = {\r\n      \r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.props.loadWeather()\r\n    }\r\n\r\n    setSearch = async (value) => {\r\n        const address = await geoService.query(value);\r\n        const {lat}=address;\r\n        const {lng}=address;\r\n        await this.props.loadWeather(lat,lng)\r\n    }\r\n\r\n    render() {\r\n        const { weatherToday } = this.props.weather;\r\n        const { nextDays } = this.props.weather;\r\n        return (\r\n            <>\r\n                <WeatherSearch search={this.setSearch} />\r\n                {weatherToday && nextDays && <>\r\n                    <MainWeather weather={weatherToday} />\r\n                    <WeatherList nextDays={nextDays} weatherToday={weatherToday} />\r\n                </>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        weather: state.weather,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadWeather,\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(HomePage)","import React from 'react';\nimport { Route } from 'react-router-dom'\nimport HomePage from './pages/HomePage/HomePage'\n\nimport logo from './logo.svg';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <section className=\"main-container\">\n         <Route exact path=\"/\" component={HomePage} />\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst INITIAL_STATE = {\r\n    weatherToday: [],\r\n    nextDays:[]\r\n}\r\n\r\n\r\nexport default function weathertReducer(state = INITIAL_STATE, action) {\r\n    switch (action.type) {\r\n       \r\n        case 'SET_WEATHER':\r\n            return {\r\n                ...state,\r\n                weatherToday: action.weather.today,\r\n                nextDays:action.weather.next\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport weathertReducer from './modules/weather/reducers'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    weather: weathertReducer,\r\n})\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk)\r\n)\r\nexport default store\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { HashRouter as Router } from 'react-router-dom'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store.js'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n        <App />\n    </Router>\n     </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}